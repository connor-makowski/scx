window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "scx", "modulename": "scx", "kind": "module", "doc": "<h1 id=\"scx\">SCx</h1>\n\n<p><a href=\"https://badge.fury.io/py/scx\"><img src=\"https://badge.fury.io/py/scx.svg\" alt=\"PyPI version\" /></a>\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\" /></a></p>\n\n<p>MIT's <a href=\"https://micromasters.mit.edu/scm/\">Supply Chain Micromaster</a> (SCx) Python Package</p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p><a href=\"https://connor-makowski.github.io/scx/scx.html\">Technical documentation</a> can be found <a href=\"https://connor-makowski.github.io/scx/scx.html\">here</a>.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<ul>\n<li><a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/optimization/\">All Optimization Examples</a>\n<ul>\n<li><a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/optimization/basic_examples\">Basic Examples</a></li>\n<li><a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/optimization/blinky_examples\">Blinky Examples (with video walkthroughs)</a></li>\n<li><a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/optimization/fow_examples\">Food On Wheels Examples (with video walkthroughs)</a></li>\n<li><a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/optimization/eco_pants_examples\">Eco Pants Examples (with video walkthroughs)</a></li>\n<li><a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/optimization/misc_examples\">Miscellaneous Examples</a></li>\n</ul></li>\n<li><a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/database/\">All Database Examples</a>\n<ul>\n<li><a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/database/Transaction.ipynb\">Transaction Database Example</a></li>\n</ul></li>\n</ul>\n\n<h2 id=\"setup\">Setup</h2>\n\n<h3 id=\"cloud-setup-google-colab\">Cloud Setup (Google Colab)</h3>\n\n<ul>\n<li>You can access google colab <a href=\"https://colab.research.google.com/\">here</a></li>\n<li>Create a new notebook</li>\n<li>Install the <code>scx</code> package by adding the following to a new code cell at the <strong>top</strong> of your notebook and running it:\n<ul>\n<li><code>pip install scx</code></li>\n</ul></li>\n</ul>\n\n<h3 id=\"local-setup\">Local Setup</h3>\n\n<p>Make sure you have Python 3.11.x (or higher) installed on your system. You can download it <a href=\"https://www.python.org/downloads/\">here</a>.\n<details>\n<summary>\nRecommended (but Optional) -> Expand this section to setup and activate a virtual environment.\n</summary></p>\n\n<ul>\n<li><p>Install (or upgrade) virtualenv:</p>\n\n<pre><code>python3 -m pip install --upgrade virtualenv\n</code></pre></li>\n<li><p>Create your virtualenv named <code>venv</code>:</p>\n\n<pre><code>python3 -m virtualenv venv\n</code></pre></li>\n<li><p>Activate your virtual environment</p>\n\n<ul>\n<li>On Unix (Mac or Linux):</li>\n</ul>\n\n<pre><code>source venv/bin/activate\n</code></pre>\n\n<ul>\n<li>On Windows:</li>\n</ul>\n\n<pre><code>venv\\scripts\u0007ctivate\n</code></pre></li>\n</ul>\n\n<p></details></p>\n\n<pre><code>pip install scx\n</code></pre>\n\n<h2 id=\"optimization-getting-started\">Optimization Getting Started</h2>\n\n<p>See all of the optimization examples <a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/optimization/\">here</a>.</p>\n\n<h3 id=\"basic-usage\">Basic Usage</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scx.optimize</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Model</span>\n</code></pre>\n</div>\n\n<h4 id=\"simple-optimization\">Simple Optimization</h4>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scx.optimize</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"c1\"># Create variables</span>\n<span class=\"n\">product_1_amt</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">variable</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;product_1&quot;</span><span class=\"p\">,</span> <span class=\"n\">lowBound</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">product_2_amt</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">variable</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;product_2&quot;</span><span class=\"p\">,</span> <span class=\"n\">lowBound</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize the model</span>\n<span class=\"n\">my_model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Generic_Problem&quot;</span><span class=\"p\">,</span> <span class=\"n\">sense</span><span class=\"o\">=</span><span class=\"s1\">&#39;maximize&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add the Objective Fn</span>\n<span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">add_objective</span><span class=\"p\">(</span>\n    <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">product_1_amt</span><span class=\"o\">*</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"n\">product_2_amt</span><span class=\"o\">*</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Add Constraints</span>\n<span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">add_constraint</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;input_1_constraint&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"n\">product_1_amt</span><span class=\"o\">*</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">product_2_amt</span><span class=\"o\">*</span><span class=\"mi\">2</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">100</span>\n<span class=\"p\">)</span>\n<span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">add_constraint</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;input_2_constraint&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"n\">product_1_amt</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"o\">+</span><span class=\"n\">product_2_amt</span><span class=\"o\">*</span><span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">200</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Solve the model</span>\n<span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">get_duals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">get_slacks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Show the outputs</span>\n<span class=\"c1\"># NOTE: outputs can be fetched directly as a dictionary with `my_model.get_outputs()`</span>\n<span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">show_outputs</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Outputs:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">{</span><span class=\"s1\">&#39;duals&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;input_1_constraint&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;input_2_constraint&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">},</span>\n <span class=\"s1\">&#39;objective&#39;</span><span class=\"p\">:</span> <span class=\"mf\">80.0</span><span class=\"p\">,</span>\n <span class=\"s1\">&#39;slacks&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;input_1_constraint&#39;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;input_2_constraint&#39;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">},</span>\n <span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Optimal&#39;</span><span class=\"p\">,</span>\n <span class=\"s1\">&#39;variables&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;product_1&#39;</span><span class=\"p\">:</span> <span class=\"mf\">60.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;product_2&#39;</span><span class=\"p\">:</span> <span class=\"mf\">20.0</span><span class=\"p\">}}</span>\n</code></pre>\n</div>\n\n<h2 id=\"database-getting-started\">Database Getting Started</h2>\n\n<p>See all of the database examples <a href=\"https://github.com/connor-makowski/scx/tree/main/notebooks/database/\">here</a></p>\n\n<h3 id=\"basic-usage-2\">Basic Usage</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scx.database</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Database</span>\n<span class=\"c1\"># Specify the S3 path to the data</span>\n<span class=\"n\">data_folder</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;s3://scx-dev/databases/supermarket/&#39;</span>\n<span class=\"c1\"># Create the database</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Database</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;&#39;&#39;</span>\n<span class=\"s1\">    CREATE TABLE Customers AS SELECT * FROM read_parquet(&#39;</span><span class=\"si\">{</span><span class=\"n\">data_folder</span><span class=\"si\">}</span><span class=\"s1\">customers.parquet&#39;);</span>\n<span class=\"s1\">&#39;&#39;&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># Show the database Schema</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">show_info</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Query the database</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM Customers LIMIT 5&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "scx.database", "modulename": "scx.database", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scx.database.Database", "modulename": "scx.database", "qualname": "Database", "kind": "class", "doc": "<p></p>\n", "bases": "scx.utils.Error"}, {"fullname": "scx.database.Database.__init__", "modulename": "scx.database", "qualname": "Database.__init__", "kind": "function", "doc": "<p>Create a database</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li><code>setup_code</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The SQL code to run that sets up the database</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">setup_code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "scx.database.Database.con", "modulename": "scx.database", "qualname": "Database.con", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scx.database.Database.get_info", "modulename": "scx.database", "qualname": "Database.get_info", "kind": "function", "doc": "<p>Return a dictionary of the database schema</p>\n\n<p>Returns a dictionary of the database schema in the following format:\n{\n    'Table1': {\n        'type': 'table',\n        'columns': {\n            'column1': 'type1',\n            'column2': 'type2',\n            ...\n        }\n    },\n    ...\n}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "scx.database.Database.show_info", "modulename": "scx.database", "qualname": "Database.show_info", "kind": "function", "doc": "<p>Print the database schema</p>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>pretty</code>:\n<ul>\n<li>Type: bool</li>\n<li>Default: True</li>\n<li>What: Whether to print the schema in a human-readable format\n<ul>\n<li>If True, print the schema in a human-readable format</li>\n<li>If False, pretty prints the schema as a dictionary</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Returns None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pretty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scx.database.Database.query", "modulename": "scx.database", "qualname": "Database.query", "kind": "function", "doc": "<p>Execute a query on the database</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li><code>query</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The SQL query to execute</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>return_type</code>:\n<ul>\n<li>Type: str</li>\n<li>Default: 'list_of_dicts'</li>\n<li>What: The format to return the results in\n<ul>\n<li>'list_of_dicts': Returns a list of dictionaries, where each dictionary is a row</li>\n<li>'dict_of_lists': Returns a dictionary of lists, where each list is a column</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Returns the results of the query in the specified format</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">return_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;list_of_dicts&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize", "modulename": "scx.optimize", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scx.optimize.ModelUtils", "modulename": "scx.optimize", "qualname": "ModelUtils", "kind": "class", "doc": "<p></p>\n", "bases": "scx.utils.Error"}, {"fullname": "scx.optimize.ModelUtils.variable", "modulename": "scx.optimize", "qualname": "ModelUtils.variable", "kind": "function", "doc": "<p>Creates a variable object to be used in an optimize.Model object</p>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>name</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The name of this variable</li>\n</ul></li>\n</ul>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>lowBound</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: A lower bound for this variable</li>\n<li>Default: -infinity</li>\n</ul></li>\n<li><code>upBound</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: An upper bound for this variable</li>\n<li>Default: infinity</li>\n</ul></li>\n<li><code>cat</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The category of this variable</li>\n<li>Default: <code>Continuous</code></li>\n<li>Options: ['Continuous','Binary','Integer']</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tlowBound: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tupBound: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, None] = None,</span><span class=\"param\">\tcat: [&lt;class &#x27;str&#x27;&gt;, None] = &#x27;Continuous&#x27;</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.ModelUtils.sum", "modulename": "scx.optimize", "qualname": "ModelUtils.sum", "kind": "function", "doc": "<p>Creates a function that can sum over a list to add as an objective or constraint on the model</p>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>vector</code>:\n<ul>\n<li>Type: list</li>\n<li>What: A list of items or functions to sum over</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vector</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model", "modulename": "scx.optimize", "qualname": "Model", "kind": "class", "doc": "<p></p>\n", "bases": "ModelUtils"}, {"fullname": "scx.optimize.Model.__init__", "modulename": "scx.optimize", "qualname": "Model.__init__", "kind": "function", "doc": "<p>Initialize a new optimization model object.</p>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>name</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The name of this optimization model</li>\n</ul></li>\n<li><code>sense</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The type of optimization to perform</li>\n<li>Options: ['maximize','minimize',None]</li>\n<li>Note: If None, no optimization is performed, but a feasible solution is searched for given the constraints</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\">sense: [&lt;class &#x27;str&#x27;&gt;, None]</span>)</span>"}, {"fullname": "scx.optimize.Model.name", "modulename": "scx.optimize", "qualname": "Model.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scx.optimize.Model.sense", "modulename": "scx.optimize", "qualname": "Model.sense", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scx.optimize.Model.outputs", "modulename": "scx.optimize", "qualname": "Model.outputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scx.optimize.Model.add_objective", "modulename": "scx.optimize", "qualname": "Model.add_objective", "kind": "function", "doc": "<p>Add the objective function to the current model object. Each model can only have one objective function.</p>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function</li>\n<li>What: The pythonic version of the objective function</li>\n<li>Note: This function should <strong>not</strong> have any pythonic <a href=\"https://docs.python.org/3/reference/expressions.html#comparisons\">comparison operators</a></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model.add_constraint", "modulename": "scx.optimize", "qualname": "Model.add_constraint", "kind": "function", "doc": "<p>Add a constraint function to the current model object. Each model can have unlimited constraints.</p>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>fn</code>:\n<ul>\n<li>Type: function</li>\n<li>What: The pythonic version of a constraint function</li>\n<li>Note: This function should have pythonic <a href=\"https://docs.python.org/3/reference/expressions.html#comparison\">comparison operators</a></li>\n</ul></li>\n</ul>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>name</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The name of this constraint</li>\n<li>Default: None</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fn</span>, </span><span class=\"param\">name: [&lt;class &#x27;str&#x27;&gt;, None] = None</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model.solve", "modulename": "scx.optimize", "qualname": "Model.solve", "kind": "function", "doc": "<p>Solve the current model object.</p>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>pulp_log</code>:\n<ul>\n<li>Type: bool</li>\n<li>What: A flag to indicate if the relevant pulp / coinOr solver log should be logged in the console. This can be helpful for debugging.</li>\n<li>Default: False</li>\n</ul></li>\n<li><code>except_on_infeasible</code>:\n<ul>\n<li>Type: bool</li>\n<li>What: A flag to indicate if the model should throw an exception if the optimization model is infeasible. If false, the model will automatically relax constraints to generate an infeasible solution.</li>\n<li>Default: True</li>\n</ul></li>\n<li><code>get_duals</code>:\n<ul>\n<li>Type: bool</li>\n<li>What: A flag to indicate if the dual values for constraints should be added to the normal <code>outputs</code>.</li>\n<li>Default: False</li>\n</ul></li>\n<li><code>get_slacks</code>:\n<ul>\n<li>Type: bool</li>\n<li>What: A flag to indicate if the slack values for constraints should be added to the normal <code>outputs</code>.</li>\n<li>Default: False</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pulp_log</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">except_on_infeasible</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">get_duals</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">get_slacks</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model.get_slacks", "modulename": "scx.optimize", "qualname": "Model.get_slacks", "kind": "function", "doc": "<p>Adds slack values to the model outputs dictionary as <code>slacks</code> and also returns those slack values as an dictonary.</p>\n\n<p>Notes:</p>\n\n<pre><code>- The model must be solved before this method can be used\n- Slack values might not be avaialable depending on the solver that is used\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model.get_duals", "modulename": "scx.optimize", "qualname": "Model.get_duals", "kind": "function", "doc": "<p>Adds dual values to the model outputs dictionary as <code>duals</code> and also returns those dual values as an dictonary.</p>\n\n<p>Notes:</p>\n\n<pre><code>- The model must be solved before this method can be used\n- Dual values will be 0 or None for non LP models (EG MILPs)\n- Dual values might not be avaialable depending on the solver that is used\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model.validity_checks", "modulename": "scx.optimize", "qualname": "Model.validity_checks", "kind": "function", "doc": "<p>Runs validity checks on the model before solving it</p>\n\n<ul>\n<li>Checks to make sure the model has not already been solved</li>\n<li>Ensures that variables each have unique names</li>\n<li>Note: PuLP automatically verifies constraint name uniqueness</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model.get_formulation", "modulename": "scx.optimize", "qualname": "Model.get_formulation", "kind": "function", "doc": "<p>Returns the current model formulation as a string in a human readable form.</p>\n\n<p>Note: This aggregates variables where possible such that</p>\n\n<ul>\n<li><code>variable_1*2 + variable_1*1</code> =&gt; <code>variable_1*3</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model.show_formulation", "modulename": "scx.optimize", "qualname": "Model.show_formulation", "kind": "function", "doc": "<p>Shows the current model's formulation in the terminal (from self.get_formulation())</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model.get_outputs", "modulename": "scx.optimize", "qualname": "Model.get_outputs", "kind": "function", "doc": "<p>Returns a solved model's outputs.</p>\n\n<p>Note: A model must be solved before getting these outputs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.optimize.Model.show_outputs", "modulename": "scx.optimize", "qualname": "Model.show_outputs", "kind": "function", "doc": "<p>Shows a solved model's outputs in the terminal (from self.get_outputs())</p>\n\n<p>Optional:</p>\n\n<pre><code>- `pretty`:\n    - Type: bool\n    - What: Show the outputs in a pretty format\n    - Default: True\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pretty</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.statistics", "modulename": "scx.statistics", "kind": "module", "doc": "<p>NOTE: The statistics package is currently under construction</p>\n"}, {"fullname": "scx.statistics.Summary", "modulename": "scx.statistics", "qualname": "Summary", "kind": "class", "doc": "<p></p>\n", "bases": "scx.utils.Error"}, {"fullname": "scx.statistics.Summary.get_all_summary_stats", "modulename": "scx.statistics", "qualname": "Summary.get_all_summary_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\">vector: [&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;]</span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "scx.statistics.Summary.get_percentile", "modulename": "scx.statistics", "qualname": "Summary.get_percentile", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tpercentile: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;],</span><span class=\"param\">\tvector: [&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">vector_is_checked</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "scx.statistics.Summary.get_mode", "modulename": "scx.statistics", "qualname": "Summary.get_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tvector: [&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">vector_is_checked</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "scx.statistics.Summary.get_mean", "modulename": "scx.statistics", "qualname": "Summary.get_mean", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tvector: [&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">vector_is_checked</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "scx.utils", "modulename": "scx.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scx.utils.Error", "modulename": "scx.utils", "qualname": "Error", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "scx.utils.Error.warn", "modulename": "scx.utils", "qualname": "Error.warn", "kind": "function", "doc": "<p>Usage:</p>\n\n<ul>\n<li>Creates a class based warning message</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>message</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The message to warn users with</li>\n</ul></li>\n</ul>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>depth</code>:\n<ul>\n<li>Type: int</li>\n<li>What: The depth of the nth call below the top of the method stack</li>\n<li>Note: Depth starts at 0 (indicating the current method in the stack)</li>\n<li>Default: 0</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scx.utils.Error.exception", "modulename": "scx.utils", "qualname": "Error.exception", "kind": "function", "doc": "<p>Usage:</p>\n\n<ul>\n<li>Creates a class based exception message</li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li><code>message</code>:\n<ul>\n<li>Type: str</li>\n<li>What: The message to raise an exception with</li>\n</ul></li>\n</ul>\n\n<p>Optional:</p>\n\n<ul>\n<li><code>depth</code>:\n<ul>\n<li>Type: int</li>\n<li>What: The depth of the nth call below the top of the method stack</li>\n<li>Note: Depth starts at 0 (indicating the current method in the stack)</li>\n<li>Default: 0</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();